name: CI

on:
  push:
    branches: ['**']
  pull_request:
    branches: ['**']
  workflow_dispatch:

env:
  HUGO_VERSION: v0.150.1

jobs:
  test:
    strategy:
      matrix:
        os:
          - macos-latest
          - macos-14
          - macos-15
          - ubuntu-22.04
          - ubuntu-24.04
          - ubuntu-24.04-arm

    runs-on: ${{ matrix.os }}
    name: Test on ${{ matrix.os }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24'

      - name: Cache Go modules and Hugo binary
        id: cache-hugo
        uses: actions/cache@v4
        with:
          path: |
            ~/go/pkg/mod
            ~/go/bin/hugo
          key:
            ${{ runner.os }}-${{ runner.arch }}-go-hugo-${{ env.HUGO_VERSION }}

      - name: Install build dependencies (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc

      - name: Install build dependencies (macOS)
        if: runner.os == 'macOS'
        run: |
          # Xcode command line tools should already be available in GitHub Actions
          xcode-select --install 2>/dev/null || true

      - name: Install Hugo ${{ env.HUGO_VERSION }}
        run: |
          echo "Cache hit: ${{ steps.cache-hugo.outputs.cache-hit }}"
          echo "Cache key: ${{ runner.os }}-${{ runner.arch }}-go-hugo-${{ env.HUGO_VERSION }}"

          # Check if Hugo is already available
          if [ -f "$HOME/go/bin/hugo" ]; then
            echo "Hugo found in cache for ${{ runner.os }}-${{ runner.arch }}"
            echo "$HOME/go/bin" >> $GITHUB_PATH
            hugo version
          else
            echo "Installing Hugo from source using Go for ${{ runner.os }}-${{ runner.arch }}"
            echo "Go version: $(go version)"
            echo "GOOS: $(go env GOOS)"
            echo "GOARCH: $(go env GOARCH)"
            CGO_ENABLED=1 go install -tags extended github.com/gohugoio/hugo@${{ env.HUGO_VERSION }}
            echo "$HOME/go/bin" >> $GITHUB_PATH
            hugo version
            echo "Hugo binary size: $(ls -lh $HOME/go/bin/hugo | awk '{print $5}')"
            echo "Hugo will be cached for future runs"
          fi

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: make install-deps

      - name: Check trailing whitespace
        run: make check-trailing-whitespace

      - name: Check code formatting
        run: make check-prettify

      - name: Build example site
        run: make build-example

      - name: Run all tests
        run: make test

      - name: Upload artifacts
        if:
          success() && matrix.os == 'ubuntu-24.04' && matrix.name-suffix !=
          '-arm'
        uses: actions/upload-artifact@v4
        with:
          name: example-site
          path: exampleSite/public/

  deploy-preview:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24'

      - name: Cache Go modules and Hugo binary
        id: cache-hugo
        uses: actions/cache@v4
        with:
          path: |
            ~/go/pkg/mod
            ~/go/bin/hugo
          key:
            ${{ runner.os }}-${{ runner.arch }}-go-hugo-${{ env.HUGO_VERSION }}

      - name: Install build dependencies (Linux)
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc

      - name: Install Hugo ${{ env.HUGO_VERSION }}
        run: |
          echo "Cache hit: ${{ steps.cache-hugo.outputs.cache-hit }}"
          echo "Cache key: ${{ runner.os }}-${{ runner.arch }}-go-hugo-${{ env.HUGO_VERSION }}"

          # Check if Hugo is already available
          if [ -f "$HOME/go/bin/hugo" ]; then
            echo "Hugo found in cache for ${{ runner.os }}-${{ runner.arch }}"
            echo "$HOME/go/bin" >> $GITHUB_PATH
            hugo version
          else
            echo "Installing Hugo from source using Go for ${{ runner.os }}-${{ runner.arch }}"
            echo "Go version: $(go version)"
            echo "GOOS: $(go env GOOS)"
            echo "GOARCH: $(go env GOARCH)"
            CGO_ENABLED=1 go install -tags extended github.com/gohugoio/hugo@${{ env.HUGO_VERSION }}
            echo "$HOME/go/bin" >> $GITHUB_PATH
            hugo version
            echo "Hugo binary size: $(ls -lh $HOME/go/bin/hugo | awk '{print $5}')"
            echo "Hugo will be cached for future runs"
          fi

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: make install-deps

      - name: Format code
        run: |
          make prettify
          make fix-trailing-whitespace

      - name: Build example site for preview
        run: make build-example

      - name: Deploy to GitHub Pages (PR Preview)
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./exampleSite/public
          destination_dir: pr-${{ github.event.pull_request.number }}

      - name: Comment PR with preview link
        uses: actions/github-script@v8
        with:
          script: |
            const prNumber = context.payload.pull_request.number;
            const previewUrl = `https://${context.repo.owner}.github.io/${context.repo.repo}/pr-${prNumber}/`;

            github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber,
              body: `ðŸš€ Preview deployment ready!\n\n[View Preview](${previewUrl})`
            });

  deploy-pages:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    permissions:
      contents: read
      pages: write
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24'

      - name: Cache Go modules and Hugo binary
        id: cache-hugo
        uses: actions/cache@v4
        with:
          path: |
            ~/go/pkg/mod
            ~/go/bin/hugo
          key:
            ${{ runner.os }}-${{ runner.arch }}-go-hugo-${{ env.HUGO_VERSION }}

      - name: Install build dependencies (Linux)
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc

      - name: Install Hugo ${{ env.HUGO_VERSION }}
        run: |
          echo "Cache hit: ${{ steps.cache-hugo.outputs.cache-hit }}"
          echo "Cache key: ${{ runner.os }}-${{ runner.arch }}-go-hugo-${{ env.HUGO_VERSION }}"

          # Check if Hugo is already available
          if [ -f "$HOME/go/bin/hugo" ]; then
            echo "Hugo found in cache for ${{ runner.os }}-${{ runner.arch }}"
            echo "$HOME/go/bin" >> $GITHUB_PATH
            hugo version
          else
            echo "Installing Hugo from source using Go for ${{ runner.os }}-${{ runner.arch }}"
            echo "Go version: $(go version)"
            echo "GOOS: $(go env GOOS)"
            echo "GOARCH: $(go env GOARCH)"
            CGO_ENABLED=1 go install -tags extended github.com/gohugoio/hugo@${{ env.HUGO_VERSION }}
            echo "$HOME/go/bin" >> $GITHUB_PATH
            hugo version
            echo "Hugo binary size: $(ls -lh $HOME/go/bin/hugo | awk '{print $5}')"
            echo "Hugo will be cached for future runs"
          fi

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: make install-deps

      - name: Format code
        run: |
          make prettify
          make fix-trailing-whitespace

      - name: Build example site for GitHub Pages
        run: |
          cd exampleSite
          hugo --themesDir .. --baseURL="https://leakix.github.io/hugo-leakix-dark/" --destination public

      - name: Setup Pages
        uses: actions/configure-pages@v4

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./exampleSite/public

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

  create-release:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    permissions:
      contents: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: make install-deps

      - name: Format code
        run: |
          make prettify
          make fix-trailing-whitespace

      - name: Generate version
        id: version
        run: |
          # Generate version based on date and short commit hash
          VERSION="v$(date +%Y.%m.%d)-$(git rev-parse --short HEAD)"
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "Generated version: ${VERSION}"

      - name: Create theme package
        run: |
          # Create clean theme directory for release
          mkdir -p release-package

          # Copy theme files (excluding development files)
          cp -r leakix-dark release-package/
          cp README.md release-package/
          cp LICENSE release-package/
          cp GITHUB_PAGES_SETUP.md release-package/

          # Create installation instructions
          cat > release-package/INSTALL.md << 'EOF'
          # LeakIX Dark Theme - Installation Guide

          ## Quick Install

          ### Method 1: Hugo Module (Recommended)

          ```bash
          # Initialize Hugo modules
          hugo mod init github.com/yourusername/yourproject

          # Add theme to config.toml
          echo '[module]
            [[module.imports]]
              path = "github.com/LeakIX/leakix-dark-theme"' >> config.toml

          # Update modules
          hugo mod get -u
          ```

          ### Method 2: Git Submodule

          ```bash
          git submodule add https://github.com/LeakIX/leakix-dark-theme.git themes/leakix-dark
          echo 'theme = "leakix-dark"' >> config.toml
          ```

          ### Method 3: Download Release

          1. Extract this release to `themes/leakix-dark/` in your Hugo site
          2. Add `theme = "leakix-dark"` to your config.toml

          ## Next Steps

          See README.md for complete configuration options and examples.
          Demo site: https://leakix.github.io/leakix-dark-theme/
          EOF

          # Create release archive
          cd release-package
          tar -czf ../leakix-dark-theme-${{ steps.version.outputs.version }}.tar.gz .
          zip -r ../leakix-dark-theme-${{ steps.version.outputs.version }}.zip .
          cd ..

      - name: Generate changelog
        id: changelog
        run: |
          # Get commits since last tag, or all commits if no tags
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          if [ -z "$LAST_TAG" ]; then
            COMMITS=$(git log --pretty=format:"- %s (%h)" --no-merges)
          else
            COMMITS=$(git log ${LAST_TAG}..HEAD --pretty=format:"- %s (%h)" --no-merges)
          fi

          # Create changelog
          CHANGELOG="## Changes in ${{ steps.version.outputs.version }}

          ${COMMITS}

          ## Installation

          Choose one of the installation methods:

          ### Hugo Module (Recommended)
          \`\`\`toml
          [module]
            [[module.imports]]
              path = \"github.com/LeakIX/leakix-dark-theme\"
          \`\`\`

          ### Git Submodule
          \`\`\`bash
          git submodule add https://github.com/LeakIX/leakix-dark-theme.git themes/leakix-dark
          \`\`\`

          ### Download
          Download and extract to \`themes/leakix-dark/\` in your Hugo site.

          ## Demo
          View the live demo at: https://leakix.github.io/leakix-dark-theme/

          ## Documentation
          See the [README](https://github.com/LeakIX/leakix-dark-theme#readme) for complete configuration options."

          # Save changelog to file and output
          echo "$CHANGELOG" > changelog.md
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGELOG" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.version.outputs.version }}
          name: 'LeakIX Dark Theme ${{ steps.version.outputs.version }}'
          body: ${{ steps.changelog.outputs.changelog }}
          draft: false
          prerelease: false
          files: |
            leakix-dark-theme-${{ steps.version.outputs.version }}.tar.gz
            leakix-dark-theme-${{ steps.version.outputs.version }}.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
